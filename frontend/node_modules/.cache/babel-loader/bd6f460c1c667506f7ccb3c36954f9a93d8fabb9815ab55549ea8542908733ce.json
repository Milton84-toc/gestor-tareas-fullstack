{"ast":null,"code":"import { createElementVNode as _createElementVNode, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"space-y-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    \"class\": \"flex items-center justify-between\"\n  }, [_createElementVNode(\"h2\", {\n    \"class\": \"text-2xl font-bold\"\n  }, \"Dashboard\")], -1 /* CACHED */)), _createVNode($setup[\"TaskForm\"], {\n    onCreated: $setup.crear\n  }), _createVNode($setup[\"TaskList\"], {\n    tasks: $setup.tasks,\n    onUpdate: $setup.actualizar,\n    onRemove: $setup.eliminar\n  }, null, 8 /* PROPS */, [\"tasks\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createElementVNode","_createVNode","$setup","onCreated","crear","tasks","onUpdate","actualizar","onRemove","eliminar"],"sources":["C:\\Users\\USER\\Desktop\\fullstack-vue-tasks\\frontend\\src\\views\\DashboardView.vue"],"sourcesContent":["<template>\n  <div class=\"space-y-4\">\n    <div class=\"flex items-center justify-between\">\n      <h2 class=\"text-2xl font-bold\">Dashboard</h2>\n    </div>\n    <TaskForm @created=\"crear\" />\n    <TaskList :tasks=\"tasks\" @update=\"actualizar\" @remove=\"eliminar\" />\n  </div>\n</template>\n<script setup>\nimport { ref, onMounted } from \"vue\";\nimport TaskForm from \"@/components/TaskForm.vue\";\nimport TaskList from \"@/components/TaskList.vue\";\nimport api from \"@/services/api\";\nimport { logout } from \"@/stores/auth\";\nimport { useRouter } from \"vue-router\";\nconst tasks = ref([]);\nconst router = useRouter();\nasync function cargar() { const { data } = await api.get(\"/tasks\"); tasks.value = data; }\nasync function crear(payload) { const { data } = await api.post(\"/tasks\", payload); tasks.value.unshift(data); }\nasync function actualizar(payload) { const { data } = await api.put(`/tasks/${payload.id}`, payload); const i = tasks.value.findIndex(t => t.id === data.id); if (i !== -1) tasks.value[i] = data; }\nasync function eliminar(id) { await api.delete(`/tasks/${id}`); tasks.value = tasks.value.filter(t => t.id !== id); }\nfunction salir() { logout(); router.push(\"/login\"); }\nonMounted(cargar);\n</script>\n"],"mappings":";;EACO,SAAM;AAAW;;uBAAtBA,mBAAA,CAMM,OANNC,UAMM,G,0BALJC,mBAAA,CAEM;IAFD,SAAM;EAAmC,IAC5CA,mBAAA,CAA6C;IAAzC,SAAM;EAAoB,GAAC,WAAS,E,qBAE1CC,YAAA,CAA6BC,MAAA;IAAlBC,SAAO,EAAED,MAAA,CAAAE;EAAK,IACzBH,YAAA,CAAmEC,MAAA;IAAxDG,KAAK,EAAEH,MAAA,CAAAG,KAAK;IAAGC,QAAM,EAAEJ,MAAA,CAAAK,UAAU;IAAGC,QAAM,EAAEN,MAAA,CAAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}